from unicorn import *
from unicorn.x86_const import *
from unicorn.mips_const import *
from unicorn.arm_const import *
from struct import *
import base64


p32 = lambda x : pack('<L', x)

### x64
def Check1(s):
    FirstCode = "\x31\xC0\x80\x39\x53\x74\x09\xC3\x0F\x1F\x84\x00\x00\x00\x00\x00\x80\x79\x01\x45\x75\xF1\x80\x79\x02\x4E\x75\xEB\x80\x79\x03\x42\x75\xE5\x80\x79\x04\x54\x75\xDF\x80\x79\x05\x56\x75\xD9\x80\x79\x06\x42\x75\xD3\x80\x79\x07\x37\x75\xCD\x80\x79\x08\x55\x75\xC7\x80\x79\x09\x47\x75\xC1\x80\x79\x0A\x56\x75\xBB\x80\x79\x0B\x6E\x0F\x94\xC0\xC3"

    CODE = 0x401000
    INPUT = 0x403000
    STACK = 0x180000
    RET = 0x7f000000
    
    mu = Uc(UC_ARCH_X86, UC_MODE_64)
    
    mu.mem_map(CODE, 0x1000)
    mu.mem_map(INPUT, 0x1000)
    mu.mem_map(STACK-0x1000, 0x2000)
    mu.mem_map(RET, 0x1000)
    
    mu.mem_write(CODE, FirstCode)
    mu.mem_write(INPUT, s)
    mu.mem_write(STACK, p32(RET))
    
    mu.reg_write(UC_X86_REG_RCX, INPUT)
    mu.reg_write(UC_X86_REG_RSP, STACK)

    mu.emu_start(CODE, RET)

    return mu.reg_read(UC_X86_REG_RAX)
### MIPS
def Check2(s):
    FirstCode = "\xE8\xFF\xBD\x27\x5E\x21\x02\x3C\x49\x48\x43\x34\x08\x00\xA3\xAF\x28\x3B\x02\x3C\x73\x6A\x42\x34\x0C\x00\xA2\xAF\x25\x66\x06\x3C\x40\x55\xC6\x34\x25\x38\x00\x00\x10\x00\xA6\xAF\x14\x00\xA7\xAF\x00\x00\x82\x90\x26\x10\x43\x00\xFF\x00\x42\x30\x10\x00\x03\x24\x0E\x00\x43\x14\x25\x10\x00\x00\x01\x00\x84\x24\x09\x00\xA3\x27\x14\x00\xA7\x27\x10\x00\x06\x24\x00\x00\x82\x90\x00\x00\x65\x90\x26\x10\x45\x00\x05\x00\x46\x14\x25\x10\x00\x00\x01\x00\x63\x24\xF9\xFF\x67\x14\x01\x00\x84\x24\x01\x00\x02\x24\x08\x00\xE0\x03\x18\x00\xBD\x27"
    
    CODE = 0x401000
    INPUT = 0x403000
    STACK = 0x180000
    RET = 0x7f000000
    
    mu = Uc(UC_ARCH_MIPS, UC_MODE_MIPS32 + UC_MODE_LITTLE_ENDIAN)
    
       
    mu.mem_map(CODE, 0x1000)
    mu.mem_map(INPUT, 0x1000)
    mu.mem_map(STACK-0x1000, 0x2000)
    mu.mem_map(RET, 0x1000)
    
    mu.mem_write(CODE, FirstCode)
    mu.mem_write(INPUT, s)
    
    mu.reg_write(UC_MIPS_REG_A0, INPUT)
    mu.reg_write(UC_MIPS_REG_SP, STACK)
    mu.reg_write(UC_MIPS_REG_RA, RET)
    
    mu.emu_start(CODE, RET)
    
    return mu.reg_read(UC_MIPS_REG_V0)
### ARM
def Check3(s):
    FirstCode = "\xF0\x4F\x2D\xE9\x0C\xD0\x4D\xE2\x49\x20\xA0\xE3\x45\xE0\xA0\xE3\x00\x20\xCD\xE5\x00\x30\x8D\xE2\x56\x20\xA0\xE3\x53\x10\xA0\xE3\x68\x40\xA0\xE3\x49\x50\xA0\xE3\x55\x60\xA0\xE3\x42\x70\xA0\xE3\x41\x80\xA0\xE3\x50\x90\xA0\xE3\x44\xA0\xA0\xE3\x35\xB0\xA0\xE3\x02\xE0\xCD\xE5\x03\xE0\x40\xE0\x0B\x20\xCD\xE5\x01\x10\xCD\xE5\x03\x40\xCD\xE5\x04\x50\xCD\xE5\x05\x60\xCD\xE5\x06\x70\xCD\xE5\x07\x80\xCD\xE5\x08\x90\xCD\xE5\x09\xA0\xCD\xE5\x0A\xB0\xCD\xE5\x00\x00\xA0\xE3\x00\x10\x8D\xE2\x01\x30\x80\xE0\x03\x20\xDE\xE7\x01\x30\xD0\xE7\x03\x00\x52\xE1\x05\x00\x00\x1A\x01\x00\x80\xE2\x0C\x00\x50\xE3\xF6\xFF\xFF\xBA\x01\x00\xA0\xE3\x0C\xD0\x8D\xE2\xF0\x8F\xBD\xE8\x00\x00\xA0\xE3\x0C\xD0\x8D\xE2\xF0\x8F\xBD\xE8"
    
    CODE = 0x401000
    INPUT = 0x403000
    STACK = 0x180000
    RET = 0x7f000000
    
    mu = Uc(UC_ARCH_ARM, UC_MODE_ARM)
    
       
    mu.mem_map(CODE, 0x1000)
    mu.mem_map(INPUT, 0x1000)
    mu.mem_map(STACK-0x1000, 0x2000)
    mu.mem_map(RET, 0x1000)
    
    mu.mem_write(CODE, FirstCode)
    mu.mem_write(INPUT, s)
    
    mu.reg_write(UC_ARM_REG_R0, INPUT)

    mu.reg_write(UC_ARM_REG_SP, STACK)
    mu.reg_write(UC_ARM_REG_LR, RET)

    mu.emu_start(CODE , RET)
    
    return mu.reg_read(UC_ARM_REG_R0)
### Free Gift
def Check4(s):
    if s == "bmlDb3JOKip9":
        return 1
    return 0
if __name__ == '__main__':
    szInput = raw_input()
    szInput = base64.b64encode(szInput)
    if len(szInput) != 48:
        print "No,"
        exit()
    ListInput = [szInput[0:12],szInput[12:24],szInput[24:36],szInput[36:]]

    if Check1(ListInput[0]) == 1:
        if Check2(ListInput[1]) == 1:
            if Check3(ListInput[2]) == 1:
                if Check4(ListInput[3]) == 1:
                    print "Great!!! Input is your flag"
                    exit()
    print "Try harder"